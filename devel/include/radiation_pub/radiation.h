// Generated by gencpp from file radiation_pub/radiation.msg
// DO NOT EDIT!


#ifndef RADIATION_PUB_MESSAGE_RADIATION_H
#define RADIATION_PUB_MESSAGE_RADIATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace radiation_pub
{
template <class ContainerAllocator>
struct radiation_
{
  typedef radiation_<ContainerAllocator> Type;

  radiation_()
    : radiation()  {
    }
  radiation_(const ContainerAllocator& _alloc)
    : radiation(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _radiation_type;
  _radiation_type radiation;





  typedef boost::shared_ptr< ::radiation_pub::radiation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::radiation_pub::radiation_<ContainerAllocator> const> ConstPtr;

}; // struct radiation_

typedef ::radiation_pub::radiation_<std::allocator<void> > radiation;

typedef boost::shared_ptr< ::radiation_pub::radiation > radiationPtr;
typedef boost::shared_ptr< ::radiation_pub::radiation const> radiationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::radiation_pub::radiation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::radiation_pub::radiation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::radiation_pub::radiation_<ContainerAllocator1> & lhs, const ::radiation_pub::radiation_<ContainerAllocator2> & rhs)
{
  return lhs.radiation == rhs.radiation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::radiation_pub::radiation_<ContainerAllocator1> & lhs, const ::radiation_pub::radiation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace radiation_pub

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::radiation_pub::radiation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::radiation_pub::radiation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radiation_pub::radiation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::radiation_pub::radiation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radiation_pub::radiation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::radiation_pub::radiation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::radiation_pub::radiation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae3ed639d310a116f0319906c7d3e096";
  }

  static const char* value(const ::radiation_pub::radiation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae3ed639d310a116ULL;
  static const uint64_t static_value2 = 0xf0319906c7d3e096ULL;
};

template<class ContainerAllocator>
struct DataType< ::radiation_pub::radiation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "radiation_pub/radiation";
  }

  static const char* value(const ::radiation_pub::radiation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::radiation_pub::radiation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] radiation\n"
;
  }

  static const char* value(const ::radiation_pub::radiation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::radiation_pub::radiation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.radiation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct radiation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::radiation_pub::radiation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::radiation_pub::radiation_<ContainerAllocator>& v)
  {
    s << indent << "radiation[]" << std::endl;
    for (size_t i = 0; i < v.radiation.size(); ++i)
    {
      s << indent << "  radiation[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.radiation[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RADIATION_PUB_MESSAGE_RADIATION_H
